// Prisma Schema - 用户体验拯救项目管理系统

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// 枚举类型
// ============================================

enum UserRole {
  ADMIN
  MEMBER
}

enum ProjectStatus {
  PLANNING
  IN_PROGRESS
  COMPLETED
  ARCHIVED
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  IN_REVIEW
  COMPLETED
  CANCELLED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

// ============================================
// 用户模型
// ============================================

model User {
  id             String   @id @default(uuid()) @db.Uuid
  name           String   @db.VarChar(100)
  email          String   @unique @db.VarChar(255)
  hashedPassword String   @map("hashed_password") @db.VarChar(255)
  role           UserRole @default(MEMBER)
  isActive       Boolean  @default(true) @map("is_active")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  // Relations
  ownedProjects       Project[]        @relation("ProjectOwner")
  projectMemberships  ProjectMember[]
  assignedTasks       Task[]           @relation("TaskAssignee")
  createdTasks        Task[]           @relation("TaskCreator")
  expenses            Expense[]
  auditLogs           AuditLog[]
  addedDocuments      DocumentLink[]   @relation("DocumentAddedBy")

  // NextAuth.js fields
  accounts            Account[]
  sessions            Session[]

  @@index([email])
  @@index([role])
  @@map("users")
}

// ============================================
// NextAuth.js Models
// ============================================

model Account {
  id                String  @id @default(uuid()) @db.Uuid
  userId            String  @map("user_id") @db.Uuid
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(uuid()) @db.Uuid
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id") @db.Uuid
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// ============================================
// 项目模型
// ============================================

model Project {
  id          String        @id @default(uuid()) @db.Uuid
  name        String        @db.VarChar(200)
  description String?       @db.Text
  status      ProjectStatus @default(PLANNING)
  
  // Timeline
  startDate   DateTime?     @map("start_date") @db.Date
  endDate     DateTime?     @map("end_date") @db.Date
  
  // Budget
  budget      Decimal       @default(0) @db.Decimal(15, 2)
  spent       Decimal       @default(0) @db.Decimal(15, 2)
  
  // Ownership
  ownerId     String        @map("owner_id") @db.Uuid
  
  // Timestamps
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")

  // Relations
  owner         User            @relation("ProjectOwner", fields: [ownerId], references: [id], onDelete: Restrict)
  members       ProjectMember[]
  documentLinks DocumentLink[]
  tasks         Task[]
  expenses      Expense[]

  @@index([name])
  @@index([status])
  @@index([endDate])
  @@index([ownerId])
  @@map("projects")
}

// ============================================
// 项目成员模型
// ============================================

model ProjectMember {
  id        String   @id @default(uuid()) @db.Uuid
  projectId String   @map("project_id") @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  role      String   @db.VarChar(50)
  joinedAt  DateTime @default(now()) @map("joined_at")

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
  @@index([projectId])
  @@index([userId])
  @@map("project_members")
}

// ============================================
// 文档链接模型
// ============================================

model DocumentLink {
  id          String    @id @default(uuid()) @db.Uuid
  title       String    @db.VarChar(200)
  url         String    @db.VarChar(500)
  description String?   @db.Text
  
  // Relations (can belong to project or task)
  projectId   String?   @map("project_id") @db.Uuid
  taskId      String?   @map("task_id") @db.Uuid
  
  addedById   String    @map("added_by_id") @db.Uuid
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  // Relations
  project  Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  task     Task?    @relation(fields: [taskId], references: [id], onDelete: Cascade)
  addedBy  User     @relation("DocumentAddedBy", fields: [addedById], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([taskId])
  @@index([addedById])
  @@map("document_links")
}

// ============================================
// 任务模型
// ============================================

model Task {
  id          String       @id @default(uuid()) @db.Uuid
  name        String       @db.VarChar(200)
  description String?      @db.Text
  status      TaskStatus   @default(TODO)
  priority    TaskPriority @default(MEDIUM)
  
  // Project relationship
  projectId   String       @map("project_id") @db.Uuid
  
  // Assignment
  assigneeId  String?      @map("assignee_id") @db.Uuid
  createdById String?      @map("created_by_id") @db.Uuid
  
  // Timeline
  dueDate     DateTime?    @map("due_date") @db.Date
  completedAt DateTime?    @map("completed_at")
  
  // Timestamps
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")

  // Relations
  project       Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)
  assignee      User?          @relation("TaskAssignee", fields: [assigneeId], references: [id], onDelete: SetNull)
  createdBy     User?          @relation("TaskCreator", fields: [createdById], references: [id], onDelete: SetNull)
  documentLinks DocumentLink[]

  @@index([name])
  @@index([status])
  @@index([priority])
  @@index([projectId])
  @@index([assigneeId])
  @@index([dueDate])
  @@map("tasks")
}

// ============================================
// 支出模型
// ============================================

model Expense {
  id          String   @id @default(uuid()) @db.Uuid
  projectId   String   @map("project_id") @db.Uuid
  description String   @db.VarChar(500)
  amount      Decimal  @db.Decimal(15, 2)
  category    String   @db.VarChar(100)
  date        DateTime @db.Date
  
  // Relations
  createdById String   @map("created_by_id") @db.Uuid
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdBy User    @relation(fields: [createdById], references: [id], onDelete: Restrict)

  @@index([projectId])
  @@index([date])
  @@map("expenses")
}

// ============================================
// 审计日志模型
// ============================================

model AuditLog {
  id           String   @id @default(uuid()) @db.Uuid
  userId       String   @map("user_id") @db.Uuid
  actionType   String   @map("action_type") @db.VarChar(50)
  resourceType String   @map("resource_type") @db.VarChar(50)
  resourceId   String?  @map("resource_id") @db.Uuid
  resourceName String?  @map("resource_name") @db.VarChar(200)
  details      Json?
  timestamp    DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([actionType])
  @@index([resourceType])
  @@index([timestamp])
  @@map("audit_logs")
}
