version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: ux-rescue-postgres-prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-ux_rescue_pm}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ux-rescue-network

  backend:
    build:
      context: ./backend
      dockerfile: ../docker/backend.Dockerfile
    container_name: ux-rescue-backend-prod
    environment:
      DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-ux_rescue_pm}
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-change-in-production}
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS:-http://localhost}
      ENVIRONMENT: production
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - ux-rescue-network
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      dockerfile: ../docker/frontend.Dockerfile
      args:
        VITE_API_URL: ${VITE_API_URL:-http://localhost:8000}
    container_name: ux-rescue-frontend-prod
    environment:
      VITE_API_URL: ${VITE_API_URL:-http://localhost:8000}
    ports:
      - "80:80"
    depends_on:
      - backend
    networks:
      - ux-rescue-network
    restart: unless-stopped

volumes:
  postgres-data:

networks:
  ux-rescue-network:
    driver: bridge
